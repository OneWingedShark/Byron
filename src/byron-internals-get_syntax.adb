With
-- Ada components.
Ada.Strings.Maps.Constants,

-- Byron components.
Byron.Types.Enumerations,
Byron.Tokens.Analyzer_Instance,

-- Recognizer components.
OpenToken.Recognizer.Real,
OpenToken.Recognizer.String,
OpenToken.Recognizer.Nothing,
OpenToken.Recognizer.Integer,
OpenToken.Recognizer.Keyword,
OpenToken.Recognizer.Separator,
OpenToken.Recognizer.Identifier,
OpenToken.Recognizer.End_Of_File,
OpenToken.Recognizer.Line_Comment,
OpenToken.Recognizer.Character_Set,
OpenToken.Recognizer.Graphic_Character,
OpenToken.Recognizer.Based_Real_Ada_Style,
OpenToken.Recognizer.Based_Integer_Ada_Style
;

Use
Byron.Types.Enumerations;

Function Byron.Internals.Get_Syntax Return Syntax is
   Package R		renames OpenToken.Recognizer;
   Package Tokenizer	renames Byron.Tokens.Analyzer_Instance;

   Function Keyword( S : String; Case_Sensitive : Boolean := False ) return Tokenizer.Recognizable_Token is
     ( Tokenizer.Get (R.Keyword.Get(S, Case_Sensitive  => Case_Sensitive)) );
   Function Separator( S : String ) return Tokenizer.Recognizable_Token is
     ( Tokenizer.Get (R.Separator.Get(S)) );

Begin
   Return Result : constant Syntax:=
     (
      Abort_T               => Keyword ("abort"),
      Abs_T                 => Keyword ("abs"),
      Abstract_T            => Keyword ("abstract"),
      Accept_T              => Keyword ("accept"),
      Access_T              => Keyword ("access"),
      Aliased_T             => Keyword ("aliased"),
      All_T                 => Keyword ("all"),
      And_T                 => Keyword ("and"),
      Array_T               => Keyword ("array"),
      At_T                  => Keyword ("at"),
      Begin_T               => Keyword ("begin"),
      Body_T                => Keyword ("body"),
      Case_T                => Keyword ("case"),
      Constant_T            => Keyword ("constant"),
      Declare_T             => Keyword ("declare"),
      Delay_T               => Keyword ("delay"),
      Delta_T               => Keyword ("delta"),
      Digits_T              => Keyword ("digits"),
      Do_T                  => Keyword ("do"),
      Else_T                => Keyword ("else"),
      Elsif_T               => Keyword ("elsif"),
      End_T                 => Keyword ("end"),
      Entry_T               => Keyword ("entry"),
      Exception_T           => Keyword ("exception"),
      Exit_T                => Keyword ("exit"),
      For_T                 => Keyword ("for"),
      Function_T            => Keyword ("function"),
      Generic_T             => Keyword ("generic"),
      Goto_T                => Keyword ("goto"),
      If_T                  => Keyword ("if"),
      In_T                  => Keyword ("in"),
      Interface_T           => Keyword ("interface"),
      Is_T                  => Keyword ("is"),
      Limited_T             => Keyword ("limited"),
      Loop_T                => Keyword ("loop"),
      Mod_T                 => Keyword ("mod"),
      New_T                 => Keyword ("new"),
      Not_T                 => Keyword ("not"),
      Null_T                => Keyword ("null"),
      Of_T                  => Keyword ("of"),
      Or_T                  => Keyword ("or"),
      Others_T              => Keyword ("others"),
      Out_T                 => Keyword ("out"),
      Overriding_T          => Keyword ("overriding"),
      Package_T             => Keyword ("package"),
      Pragma_T              => Keyword ("pragma"),
      Private_T             => Keyword ("private"),
      Procedure_T           => Keyword ("procedure"),
      Protected_T           => Keyword ("protected"),
      Raise_T               => Keyword ("raise"),
      Range_T               => Keyword ("range"),
      Record_T              => Keyword ("record"),
      Rem_T                 => Keyword ("rem"),
      Renames_T             => Keyword ("renames"),
      Requeue_T             => Keyword ("requeue"),
      Return_T              => Keyword ("return"),
      Reverse_T             => Keyword ("reverse"),
      Select_T              => Keyword ("select"),
      Separate_T            => Keyword ("separate"),
      Some_T                => Keyword ("some"),
      Subtype_T             => Keyword ("subtype"),
      Synchronized_T        => Keyword ("synchronized"),
      Tagged_T              => Keyword ("tagged"),
      Task_T                => Keyword ("task"),
      Terminate_T           => Keyword ("terminate"),
      Then_T                => Keyword ("then"),
      Type_T                => Keyword ("type"),
      Until_T               => Keyword ("until"),
      Use_T                 => Keyword ("use"),
      When_T                => Keyword ("when"),
      While_T               => Keyword ("while"),
      With_T                => Keyword ("with"),
      Xor_T                 => Keyword ("xor"),
      Colon_T               => Separator (":"),
      Comma_T               => Separator (","),
      Dot_T                 => Separator ("."),
      Semicolon_T           => Separator (";"),
      Tick_T                => Separator ("'"),
      Left_Parenthesis_T    => Separator ("("),
      Right_Parenthesis_T   => Separator (")"),
      Concatenate_T         => Separator ("&"),
      Alternative_T         => Separator ("|"),
      Equal_T               => Separator ("="),
      Not_Equal_T           => Separator ("/="),
      Greater_Than_T        => Separator (">"),
      Less_Than_T           => Separator ("<"),
      Greater_Equal_T       => Separator (">="),
      Less_Equal_T          => Separator ("<="),
      Plus_T                => Separator ("+"),
      Minus_T               => Separator ("-"),
      Times_T               => Separator ("*"),
      Divide_T              => Separator ("/"),
      Arrow_T               => Separator ("=>"),
      Assignment_T          => Separator (":="),
      Double_Dot_T          => Separator (".."),
      Exponentiate_T        => Separator ("**"),
      Left_Label_Bracket_T  => Separator ("<<"),
      Right_Label_Bracket_T => Separator (">>"),
      Box_T                 => Separator ("<>"),
      Integer_T             => Tokenizer.Get (R.Integer.Get (Allow_Signs => False)),
      Based_Integer_T       => Tokenizer.Get (R.Based_Integer_Ada_Style.Get),
      Real_T                => Tokenizer.Get (R.Real.Get (Allow_Signs => False)),
      Based_Real_T          => Tokenizer.Get (R.Based_Real_Ada_Style.Get),
      Character_T           => Tokenizer.Get (R.Graphic_Character.Get),
      String_T              => Tokenizer.Get (R.String.Get),
      Identifier            => Tokenizer.Get
        (R.Identifier.Get
           (Start_Chars     => Ada.Strings.Maps.Constants.Letter_Set,
            Body_Chars      => Ada.Strings.Maps.Constants.Alphanumeric_Set)),
      Comment               => Tokenizer.Get (R.Line_Comment.Get (" --")),
      Whitespace            => Tokenizer.Get (R.Character_Set.Get
                                          (R.Character_Set.Standard_Whitespace)),
      Bad_Token             => Tokenizer.Get (R.Nothing.Get),
      End_of_File           => Tokenizer.Get (R.End_Of_File.Get)
     );
End Byron.Internals.Get_Syntax;
