-- B3A2009.A
--
--                             Grant of Unlimited Rights
--
--     Under contracts F33600-87-D-0337, F33600-84-D-0280, MDA903-79-C-0687,
--     F08630-91-C-0015, and DCA100-97-D-0025, the U.S. Government obtained
--     unlimited rights in the software and documentation contained herein.
--     Unlimited rights are defined in DFAR 252.227-7013(a)(19).  By making
--     this public release, the Government intends to confer upon all
--     recipients unlimited rights  equal to those held by the Government.
--     These rights include rights to use, duplicate, release or disclose the
--     released technical data and computer software in whole or in part, in
--     any manner and for any purpose whatsoever, and to have or permit others
--     to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS.  THE GOVERNMENT MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--*
--
-- OBJECTIVE:
--      Check that, for P'Access of an access-to-subprogram type S, if the
--      subprogram denoted by P is declared within a generic body, S must
--      also be declared within the generic body.
--
-- TEST DESCRIPTION:
--      In order to satisfy accessibility requirements, the designated
--      subprogram P must be at the same or a less deep nesting level than the
--      access-to-subprogram type S -- P must "live" as long as S. Nesting
--      levels are the run-time nestings of masters: block statements;
--      subprogram, task, and entry bodies; and accept statements. Packages
--      are invisible to accessibility rules.
--
--      This test declares generic package and subprogram bodies in which
--      P'Access is utilized, and where the type of P'Access is:
--
--          (a) a type declared outside the generic.
--          (b) a formal type of the generic.
--          (c) a type declared within the generic declaration (package
--              case only).
--          (d) a type declared within the generic body.
--
--       The test verifies that cases (a)-(b) are illegal and cases (c)-(d)
--       are legal.
--
--
-- CHANGE HISTORY:
--      06 Dec 94   SAIC    ACVC 2.0
--      19 Apr 95   SAIC    Deleted maintenance comments in test objective.
--      02 Dec 95   SAIC    ACVC 2.0.1 fixes: Removed Acc_Outside case from
--                          Gen_Procedure, to avoid unintentional
--                          accessibility violation.
--      22 Jan 02   RLB     Commented out case (c), as it is legal by the
--                          interpretation in AI-229 (still under
--                          consideration).
--      14 Mar 07   RLB     Replaced case (c) as OK; it is clearly allowed
--                          by 3.10.2(32/2).
--!

package B3A2009_0 is

   type Acc_Outside is access procedure;
   AOut : Acc_Outside;

end B3A2009_0;


     --==================================================================--


package B3A2009 is

   generic
      type Acc_Formal is access procedure;
   procedure Gen_Procedure;


   generic
      type Acc_Formal is access procedure;
   package Gen_Package is

      type Acc_GenDecl is access procedure;

      AForm : Acc_Formal;
      ADecl : Acc_GenDecl;

      procedure Some_Operation;

   end Gen_Package;

end B3A2009;


     --==================================================================--


with B3A2009_0;
use  B3A2009_0;
package body B3A2009 is

   procedure Gen_Procedure is

      type Acc_GenBody is access procedure;

      AForm : Acc_Formal;
      ABody : Acc_GenBody;

      procedure Designated is
      begin
         null;
      end Designated;

   begin
      AForm := Designated'Access;                                     -- ERROR:
                -- Type of Designated'Access not declared in this generic unit.

      ABody := Designated'Access;                                     -- OK.
   end Gen_Procedure;



   package body Gen_Package is

      type Acc_GenBody is access procedure;

      ABody : Acc_GenBody;

      procedure Designated is
      begin
         null;
      end Designated;


      procedure Some_Operation is
         type Acc_GenOp is access procedure;
         AOp : Acc_GenOp;
      begin
         AOut := Designated'Access;                                   -- ERROR:
                -- Type of Designated'Access not declared in this generic unit.

         AForm := Designated'Access;                                  -- ERROR:
                -- Type of Designated'Access not declared in this generic unit.

	 ADecl := Designated'Access;                                  -- OK.

         ABody := Designated'Access;                                  -- OK.
         AOp   := Designated'Access;                                  -- OK.

      end Some_Operation;

   end Gen_Package;

end B3A2009;
