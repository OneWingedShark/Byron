-- B393009.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--*
--
-- OBJECTIVE:
--      Check that interface types are abstract:
--      Objects and aggregates may not be defined or allocated of an interface
--        type.
--      The type of a component may not be an interface type.
--      A function defined with an interface result type must be declared
--        abstract (even if it is not primitive).
--      The target of an assignment operation may not have an interface type.
--
-- CHANGE HISTORY:
--      28 Oct 07   RLB     Created interface version based on tests B393001 &
--                          B393003.
--
--!

package B393009_0 is

   type Non_Lim_Interface is interface;

   type Lim_Interface is limited interface;

   type Task_Interface is task interface;

   type Prot_Interface is protected interface;

   type Syn_Interface is synchronized interface;

   function Return_Lim_Interface return Lim_Interface is abstract;  -- OK.

   type Concrete is new Non_Lim_Interface with null record;

end B393009_0;

with B393009_0; use B393009_0;
procedure B393009 is

   type Interface_Ptr is access Syn_Interface;

   Object1 : Lim_Interface;                                           -- ERROR:
                                                 -- Type of object is abstract.
   Object2 : aliased Syn_Interface;                                   -- ERROR:
                                                 -- Type of object is abstract.
   Abs_Ptr : Interface_Ptr := new Syn_Interface;                      -- ERROR:
                                       -- Type of allocated object is abstract.

   type Rec1 is record
      Component : Lim_Interface;                                      -- ERROR:
   end record;                                -- Type of component is abstract.

   type Rec2 is record
      Component : Interface_Ptr := new Syn_Interface;                 -- ERROR:
   end record;                        -- Trying to allocate an abstract object.

   type Rec3 is abstract tagged limited record
      Component : Task_Interface;                                     -- ERROR:
   end record;                                -- Type of component is abstract.

   type Arr1 is array (1 .. 5) of Prot_Interface;                     -- ERROR:
                                              -- Type of component is abstract.

   type Arr2 is array (1 .. 5) of Interface_Ptr;                      -- OK.

   Object3 : Arr2 := (others => new Syn_Interface);                   -- ERROR:
                                      -- Trying to allocate an abstract object.

   function Non_Abstract_Func1 return Task_Interface;                 -- ERROR:
                       -- Function is not abstract but result type is abstract.

   function Non_Abstract_Func2 (Left, Right : Integer)
     return Prot_Interface;                                           -- ERROR:
                       -- Function is not abstract but result type is abstract.

   function Non_Abstract_Func3 (Count : Integer)
     return Non_Lim_Interface'Class;                                  -- OK.

   function Non_Abstract_Func3 (Count : Integer)
     return Non_Lim_Interface'Class is
     Object4 : Concrete;
   begin
     return Object4;
   end Non_Abstract_Func3;

   function Abstract_Func1 return Lim_Interface is abstract;          -- OK.

   Object5 : Concrete;
   Object6 : Concrete;

   procedure Assign (Target : in out Non_Lim_Interface'Class;
                     Source : in     Non_Lim_Interface'Class) is
   begin
       Non_Lim_Interface(Target) := Non_Lim_Interface(Source);        -- ERROR:
                      -- Target of an assignment operation may not be abstract.
   end Assign;

begin
   Assign (Object5, Object6);                                         -- OK.
   Assign (Object6, Non_Lim_Interface'(others => <>));                -- ERROR:
                      -- Aggregate may not have an abstract type.
   Assign (Object5, Non_Lim_Interface'(null record));                 -- ERROR:
                      -- Aggregate may not have an abstract type.
end B393009;
