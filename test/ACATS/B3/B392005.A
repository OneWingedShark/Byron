-- B392005.A
--
--                             Grant of Unlimited Rights
--
--     Under contracts F33600-87-D-0337, F33600-84-D-0280, MDA903-79-C-0687,
--     F08630-91-C-0015, and DCA100-97-D-0025, the U.S. Government obtained 
--     unlimited rights in the software and documentation contained herein.
--     Unlimited rights are defined in DFAR 252.227-7013(a)(19).  By making 
--     this public release, the Government intends to confer upon all 
--     recipients unlimited rights  equal to those held by the Government.  
--     These rights include rights to use, duplicate, release or disclose the 
--     released technical data and computer software in whole or in part, in 
--     any manner and for any purpose whatsoever, and to have or permit others 
--     to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS.  THE GOVERNMENT MAKES NO EXPRESS OR IMPLIED 
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE 
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--*
--
-- OBJECTIVE:
--      Check that a subprogram may not be a dispatching operation for two 
--      different tagged types (in a child unit package).  
--
-- TEST DESCRIPTION:
--      Declare a package which defines two tagged types, two type 
--      extensions, and two private tagged types.  Declare a child package 
--      with two type extensions of the tagged type in the parent package.  
--      Declare another two tagged types and two private extensions in the 
--      child package. Declare two tagged types in the private part of the 
--      child package. Verify that compiler generates errors for all 
--      subprograms declarations that are primitive operations for more than 
--      one tagged type.
--
--
-- CHANGE HISTORY:
--      06 Dec 94   SAIC    ACVC 2.0
--      23 Dec 94   SAIC    Changed parameter to avoid freezing rule conflict.
--                          Minor spelling corrections.
--      14 Feb 97   PWB.CTA Deleted declaration of illegal function
--                          Child_Primitive_Of_Both_Func2   
--!

package B392005_0 is  

   type Parent_Tagged_T is tagged null record;
   type Parent_Tagged_R is tagged null record;
   type New_Parent_Tagged_T1 is new Parent_Tagged_T with null record;
   type New_Parent_Tagged_T2 is new Parent_Tagged_T with null record;
   type Parent_Tagged_Private is tagged private;
   type Parent_Private_Tagged is private;

private
   type Parent_Tagged_Private is tagged 
     record
        Field_1 : String (1..10);
     end record;

   type Parent_Private_Tagged is tagged null record;

end B392005_0;

     --=================================================================--

-- Public child.
package B392005_0.B392005_1 is  
   -- Parameters declared in parent package.
   procedure Both_Types_In_Parent_Proc1
             (P1 : Parent_Tagged_T;
              P2 : Parent_Tagged_R);                               -- OK.

   function Both_Types_In_Parent_Func (P1 : New_Parent_Tagged_T1)
     return New_Parent_Tagged_T2;                                  -- OK.

   procedure Both_Types_In_Parent_Proc2
             (P1 : Parent_Tagged_T;
              P2 : Parent_Tagged_Private);                         -- OK.

   procedure Both_Types_In_Parent_Proc3
             (P1 : Parent_Tagged_T;
              P2 : Parent_Private_Tagged);                         -- OK.

   procedure Both_Types_In_Parent_Proc4
             (P1 : Parent_Private_Tagged;
              P2 : Parent_Tagged_Private);                         -- OK.

   -------------------------------------------------------------
   -- Type extensions.
   type New_Child_Tagged_T1 is new Parent_Tagged_T with null record;
   type New_Child_Tagged_T2 is new Parent_Tagged_T with null record;
   type Child_Tagged_X is tagged null record;
   type Child_Tagged_Y is tagged null record;

   -- One parameter declared in parent package.
   procedure Child_Primitive_Of_One_Proc1
             (P1 : Parent_Tagged_T;
              P2 : Child_Tagged_X);                                -- OK.

   procedure Child_Primitive_Of_One_Proc2
             (P1 : Parent_Tagged_T;
              P2 : New_Child_Tagged_T1);                           -- OK.

   function Child_Primitive_Of_One_Func1 (P1 : Child_Tagged_X)
     return Parent_Tagged_R;                                       -- OK.

   function Child_Primitive_Of_One_Func2 (P1 : New_Parent_Tagged_T1)
     return New_Child_Tagged_T1;                                   -- OK.

   -- Parameter types are declared in child package.
   procedure Same_Type_Of_Both_Proc1
             (P1 : New_Child_Tagged_T1;
              P2 : New_Child_Tagged_T1);                           -- OK.

   -- Parameter types are declared in parent package.
   function Same_Type_Of_Both_Func (P1 : Parent_Tagged_T)
     return Parent_Tagged_T;                                       -- OK.
   -------------------------------------------------------------
   -- Parameter types are declared in child package.
   procedure Child_Primitive_Of_Both_Proc1
             (P1 : Child_Tagged_X; 
              P2 : Child_Tagged_Y);                                -- ERROR:
                      -- Primitive operation for two different tagged types.

   procedure Child_Primitive_Of_Both_Proc2
             (P1 : New_Child_Tagged_T1; 
              P2 : New_Child_Tagged_T2);                           -- ERROR:
                      -- Primitive operation for two different tagged types.

   function Child_Primitive_Of_Both_Func1 (P1 : Child_Tagged_X)
     return New_Child_Tagged_T2;                                   -- ERROR:
                      -- Primitive operation for two different tagged types.
   -------------------------------------------------------------
   type Child_Tagged_Z is tagged null record;
   type New_Child_Tagged_Z1 is new Child_Tagged_Z with private;
   type New_Child_Tagged_Z2 is new Child_Tagged_Z with private;

   -- Parameter types are declared in child package.
   procedure Child_Primitive_Of_Both_Proc3
             (P1 : Child_Tagged_Z; 
              P2 : New_Child_Tagged_Z1);                           -- ERROR:
                      -- Primitive operation for two different tagged types.

   function Child_Primitive_Of_Both_Func3 (P1 : New_Child_Tagged_Z1)           
     return New_Child_Tagged_Z2;                                   -- ERROR:
                      -- Primitive operation for two different tagged types.

   -------------------------------------------------------------
   type Child_Tagged_Private is tagged private;

   procedure Same_Type_Of_Both_Proc2 
             (P1, P2 : Child_Tagged_Private);                      -- OK.

   procedure Child_Primitive_Of_Both_Proc5
             (P1 : Child_Tagged_Private;
              P2 : Child_Tagged_Z);                                -- ERROR:
                      -- Primitive operation for two different tagged types.

   -------------------------------------------------------------
   type Child_Private_Tagged is private;

   procedure Same_Type_Of_Both_Proc3
             (P1, P2 : Child_Private_Tagged);                      -- OK.

   procedure Same_Type_Of_Both_Proc4
             (P1 : Child_Private_Tagged;
              P2 : Child_Tagged_Private);                          -- ERROR:
                      -- Primitive operation for two different tagged types.

   procedure Same_Type_Of_Both_Proc5
             (P1 : Child_Private_Tagged;
              P2 : Child_Tagged_Z);                                -- ERROR:
                      -- Primitive operation for two different tagged types.

private
   type New_Child_Tagged_Z2 is new Child_Tagged_Z with null record;

   type New_Child_Tagged_Z1 is new Child_Tagged_Z with null record;

   -------------------------------------------------------------
   procedure Child_Private_Primitive_Of_Both_Proc1
             (P1 : New_Child_Tagged_Z1;
              P2 : Child_Tagged_Y);                                -- ERROR:
                      -- Primitive operation for two different tagged types.
   -------------------------------------------------------------
   type Child_Tagged_V is tagged null record;
   type Child_Tagged_W is tagged null record;

   procedure Child_Private_Primitive_Of_Both_Proc2
             (P1 : Child_Tagged_V; 
              P2 : Child_Tagged_W);                                -- ERROR:
                      -- Primitive operation for two different tagged types.
   -------------------------------------------------------------
   type Child_Tagged_Private is tagged 
     record
        Field_1 : Boolean;
     end record;

   type Child_Private_Tagged is tagged                    -- OPTIONAL ERROR:
     record           -- Primitive operation for two different tagged types:
                      -- (Same_Type_Of_Both_Proc4, Same_Type_Of_Both_Proc4).
        Field_1 : Child_Tagged_Private;
     end record;

   procedure Child_Private_Primitive_Of_Both_Proc3
             (P1 : Child_Private_Tagged;
              P2 : Child_Tagged_Private);                          -- ERROR:
                      -- Primitive operation for two different tagged types.

   procedure Child_Private_Primitive_Of_Both_Proc4
             (P1 : Child_Private_Tagged;
              P2 : New_Child_Tagged_Z1);                           -- ERROR:
                      -- Primitive operation for two different tagged types.

end B392005_0.B392005_1;
