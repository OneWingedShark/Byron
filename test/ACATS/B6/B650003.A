-- B650003
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--*
--
-- OBJECTIVE:
--
--     If the result subtype of a function is class-wide, check that the
--     accessibility level of the type of the return expression cannot be
--     statically deeper than the master that elaborated the function.
--
-- TEST DESCRIPTION:
--
--     We try returning objects of type declared at various nesting levels.
--     Note that a type declared at an inner or parallel nesting level is
--     not visible, and thus can only occur at run-time when returned from
--     another class-wide function.
--
-- CHANGE HISTORY:
--      26 Sep 2007   RLB   Created test.
--
--!
package B650003_0 is
    type Vis_Root is tagged null record;
    type Prv_Root is tagged private;
    Prv_Root_Obj : constant Prv_Root;
    type Intf is limited interface;
private
    type Prv_Root is tagged null record;
    Prv_Root_Obj : constant Prv_Root := (null record);
end;


with B650003_0;
procedure B650003 is
    type Der_Vis is new B650003_0.Vis_Root with null record;
    type Der_Prv is new B650003_0.Prv_Root with null record;
    type Impl is new B650003_0.Intf with null record;

    function Test_Vis (N : in Natural) return B650003_0.Vis_Root'Class is
        type Nest_Vis is new B650003_0.Vis_Root with null record;
    begin
        declare
            type Inner_Vis is new B650003_0.Vis_Root with null record;
        begin
            case N is
                when 1 =>
                    return B650003_0.Vis_Root'(null record);    -- OK.
                when 2 =>
                    return Der_Vis'(null record);               -- OK.
                when 3 =>
                    return Nest_Vis'(null record);              -- ERROR:
                when 4 =>
                    return Inner_Vis'(null record);             -- ERROR:
                when 5 =>
                    return Obj : B650003_0.Vis_Root'Class :=
                           B650003_0.Vis_Root'(null record) do  -- OK.
                        null;
                    end return;
                when 6 =>
                    return Obj : B650003_0.Vis_Root'Class :=
                           Der_Vis'(null record) do             -- OK.
                        null;
                    end return;
                when 7 =>
                    return Obj : B650003_0.Vis_Root'Class :=
                           Nest_Vis'(null record) do            -- ERROR:
                        null;
                    end return;
                when 8 =>
                    return Obj : B650003_0.Vis_Root'Class :=
                           Inner_Vis'(null record) do           -- ERROR:
                        null;
                    end return;
                when others => raise Program_Error;
            end case;
        end;
    end Test_Vis;

    function Test_Prv (N : in Natural) return B650003_0.Prv_Root'Class is
        type Nest_Prv is new B650003_0.Prv_Root with null record;
        Nest_Prv_Obj : Nest_Prv :=
           Nest_Prv'(B650003_0.Prv_Root_Obj with null record);
    begin
        declare
            type Inner_Prv is new B650003_0.Prv_Root with null record;
        begin
            case N is
                when 1 =>
                    return B650003_0.Prv_Root_Obj;              -- OK.
                when 2 =>
                    return Der_Prv'(B650003_0.Prv_Root_Obj with
                                    null record);               -- OK.
                when 3 =>
                    return Nest_Prv_Obj;                        -- ERROR:
                when 4 =>
                    return Inner_Prv'(B650003_0.Prv_Root_Obj with
                                      null record);             -- ERROR:
                when 5 =>
                    return Obj : B650003_0.Prv_Root'Class :=
                           B650003_0.Prv_Root_Obj do            -- OK.
                        null;
                    end return;
                when 6 =>
                    return Obj : B650003_0.Prv_Root'Class :=
                           Der_Prv'(B650003_0.Prv_Root_Obj with
                                    null record) do             -- OK.
                        null;
                    end return;
                when 7 =>
                    return Obj : B650003_0.Prv_Root'Class :=
                           Nest_Prv_Obj do                      -- ERROR:
                        null;
                    end return;
                when 8 =>
                    return Obj : B650003_0.Prv_Root'Class :=
                           Inner_Prv'(B650003_0.Prv_Root_Obj with
                                      null record) do           -- ERROR:
                        null;
                    end return;
                when others => raise Program_Error;
            end case;
        end;
    end Test_Prv;

    function Test_Intf (N : in Natural) return B650003_0.Intf'Class is
        type Nest_Impl is new B650003_0.Intf with null record;
    begin
        declare
            type Inner_Impl is new B650003_0.Intf with null record;
        begin
            case N is
                when 2 =>
                    return Impl'(null record);                   -- OK.
                when 3 =>
                    return Nest_Impl'(null record);              -- ERROR:
                when 4 =>
                    return Inner_Impl'(null record);             -- ERROR:
                when 6 =>
                    return Obj : B650003_0.Intf'Class :=
                           Impl'(null record) do                 -- OK.
                        null;
                    end return;
                when 7 =>
                    return Obj : B650003_0.Intf'Class :=
                           Nest_Impl'(null record) do            -- ERROR:
                        null;
                    end return;
                when 8 =>
                    return Obj : B650003_0.Intf'Class :=
                           Inner_Impl'(null record) do           -- ERROR:
                        null;
                    end return;
                when others => raise Program_Error;
            end case;
        end;
    end Test_Intf;

    Obj1 : B650003_0.Vis_Root'Class := Test_Vis (1);
    Obj2 : B650003_0.Prv_Root'Class := Test_Prv (1);
    Obj3 : B650003_0.Intf'Class := Test_Intf (1);

begin
    null;
end B650003;

