-- B480003.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--*
--
-- OBJECTIVE:
--
--     If the designated type of an uninitialized allocator is class-wide,
--     check that the accessibility level of the type of the subtype indication
--     cannot be statically deeper than the level of the type of the allocator.
--
-- TEST DESCRIPTION:
--
--     We try allocators initialized with objects of types declared at various
--     nesting levels. Note that a type declared at an inner or parallel
--     nesting level is not visible, and thus can only occur at run-time when
--     passed back from another subprogram.
--
--     This tests the uninitialized allocator part of 4.8(5.2/3) [only the
--     paragraph number changed for Ada 2012].
--
-- CHANGE HISTORY:
--    05 Jan 2015   RLB   Created test, using the similar return statement
--                        test (B650005) as a basis.
--    13 Mar 2015   RLB   Eliminated overlong lines and tabs.
--    21 Jan 2016   RLB   Corrected objective and test description.
--    28 Mar 2016   RLB   Added error location codes.
--
--!
package B480003_0 is
    type Vis_Root is tagged null record;
    type Prv_Root is tagged private;
    Prv_Root_Obj : constant Prv_Root;
    type Intf is limited interface;
private
    type Prv_Root is tagged null record;
    Prv_Root_Obj : constant Prv_Root := (null record);
end;


with B480003_0;
procedure B480003 is
    type Der_Vis is new B480003_0.Vis_Root with null record;
    type Der_Prv is new B480003_0.Prv_Root with null record;
    type Impl is new B480003_0.Intf with null record;

    type Acc_Vis_Root is access all B480003_0.Vis_Root'Class;

    type Acc_Prv_Root is access all B480003_0.Prv_Root'Class;

    type Acc_Intf  is access all B480003_0.Intf'Class;

    procedure Test_Vis (N : in Natural) is
        type Nest_Vis is new B480003_0.Vis_Root with null record;
        P : Acc_Vis_Root;
        type Acc_Vis_Nest is access all Nest_Vis'Class;


        procedure Nest_Test_Vis (N : in Natural) is
            type My_Inner_Vis is new Nest_Vis with null record;
            Q : Acc_Vis_Nest;
        begin
            case N is
                when 1 =>
                    Q := new Nest_Vis;                         -- OK. {26;1}
                when 2 =>
                    Q := new My_Inner_Vis;                     -- ERROR: {26;1}
                when others => raise Program_Error;
            end case;
        end Nest_Test_Vis;

    begin
        declare
            type Inner_Vis is new B480003_0.Vis_Root with null record;
        begin
            case N is
                when 1 =>
                    Nest_Test_Vis (1);
                when 2 =>
                    P := new B480003_0.Vis_Root;               -- OK. {26;1}
                when 3 =>
                    P := new Der_Vis;                          -- OK. {26;1}
                when 4 =>
                    P := new Nest_Vis;                         -- ERROR: {26;1}
                when 5 =>
                    P := new Inner_Vis;                        -- ERROR: {26;1}
                when others => raise Program_Error;
            end case;
        end;
    end Test_Vis;

    procedure Test_Prv (N : in Natural) is
        type Nest_Prv is new B480003_0.Prv_Root with null record;
        P : Acc_Prv_Root;
    begin
        declare
            type Inner_Prv is new B480003_0.Prv_Root with null record;
        begin
            case N is
                when 2 =>
                    P := new B480003_0.Prv_Root;               -- OK. {26;1}
                when 3 =>
                    P := new Der_Prv;                          -- OK. {26;1}
                when 4 =>
                    P := new Nest_Prv;                         -- ERROR: {26;1}
                when 5 =>
                    P := new Inner_Prv;                        -- ERROR: {26;1}
                when others => raise Program_Error;
            end case;
        end;
    end Test_Prv;

    procedure Test_Intf (N : in Natural) is
        type Nest_Impl is new B480003_0.Intf with null record;
    begin
        declare
            type Inner_Impl is new B480003_0.Intf with null record;
            P : Acc_Intf;
        begin
            case N is
                when 1 =>
                    P := new Impl;                             -- OK. {26;1}
                when 2 =>
                    P := new Nest_Impl;                        -- ERROR: {26;1}
                when 3 =>
                    P := new Inner_Impl;                       -- ERROR: {26;1}
                when others => raise Program_Error;
            end case;
        end;
    end Test_Intf;

begin
    Test_Vis (1);
    Test_Prv (1);
    Test_Intf (1);
end B480003;

