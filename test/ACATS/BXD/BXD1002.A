-- BXD1002.A
--
--                             Grant of Unlimited Rights
--
--     Under contracts F33600-87-D-0337, F33600-84-D-0280, MDA903-79-C-0687,
--     F08630-91-C-0015, and DCA100-97-D-0025, the U.S. Government obtained 
--     unlimited rights in the software and documentation contained herein.
--     Unlimited rights are defined in DFAR 252.227-7013(a)(19).  By making 
--     this public release, the Government intends to confer upon all 
--     recipients unlimited rights  equal to those held by the Government.  
--     These rights include rights to use, duplicate, release or disclose the 
--     released technical data and computer software in whole or in part, in 
--     any manner and for any purpose whatsoever, and to have or permit others 
--     to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS.  THE GOVERNMENT MAKES NO EXPRESS OR IMPLIED 
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE 
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--*
--
-- OBJECTIVE:
--      Check that the pragma priority expression must be static when 
--      the pragma is located within the declarative_part of a 
--      subprogram_body.
--      Check that the expression in a Priority and Interrupt_Priority
--      pragma is required to be of type Integer.
--      Check that the pragma priority expression need not be static 
--      when the pragma is located within a task_definition or 
--      protected_definition.
--
-- TEST DESCRIPTION:
--      This test contains 3 compilation units, each containing both
--      legal and illegal pragma Priority or pragma Interrupt_Priority
--      declarations.  
--
-- APPLICABILITY CRITERIA:
--      This test applies only to implementations supporting the
--      Real-Time Systems Annex.
--
--
-- CHANGE HISTORY:
--      04 AUG 95   SAIC    Initial version
--      08 MAY 96   SAIC    Incorporated Reviewer comments.
--
--!



with System;
with Report;
procedure BXD1002_1 is
  pragma Priority (Report.Ident_Int(System.Default_Priority));     -- ERROR:
                                  -- priority for a procedure must be static
begin 
  null; 
end BXD1002_1;


with System;
with Report;
package BXD1002_2 is
  protected Shared_Counter is                 
    pragma Priority (12.7);                                       -- ERROR:
                 -- expression in a priority pragma must be of type Integer
    procedure Increment;
  private
    The_Counter : Integer := 2;
  end Shared_Counter;
 
  protected type Resource is
    pragma Interrupt_Priority (True);                             -- ERROR:
      -- expression in an interrupt_priority pragma must be of type Integer
    entry Sieze;
    procedure Release;
  private
    Busy : Boolean := False;
  end Resource;

  type Not_Integer is range 0 .. 100;
  NI : constant Not_Integer := 20;

  task type The_Task is
    pragma Priority (NI);                                         -- ERROR:
                 -- expression in a priority pragma must be of type Integer
  end The_Task;


  protected Shared_Counter_2 is                 
    pragma Priority (Report.Ident_Int(System.Priority'First));       -- OK.
    procedure Increment;
  private
    The_Counter : Integer := 2;
  end Shared_Counter_2;
 
  protected type Resource_2 is
    pragma Interrupt_Priority 
         (Report.Ident_Int(System.Interrupt_Priority'First))   ;     -- OK.
    entry Sieze;
    procedure Release;
  private
    Busy : Boolean := False;
  end Resource_2;

  task type Helper_1 is
    pragma Priority (Report.Ident_Int(System.Priority'Last));        -- OK.
    entry Start_Work;
  end Helper_1;

  task type Helper_2 is
    pragma Interrupt_Priority 
       (Report.Ident_Int(System.Interrupt_Priority'Last));           -- OK.
    entry Start_Work;
  end Helper_2;

  task type Helper_3 is
    -- Note D.1(17);6.0 allows any priority value to be used in
    -- an interrupt_priority pragma in a task_definition.
    pragma Interrupt_Priority (System.Any_Priority'First);           -- OK.
  end Helper_3;


  -- check the use of discrimnants in setting the priority

  protected type Has_Priority_Disc_1 (Pr : Integer := 3) is
    pragma Priority (Pr);                                            -- OK.
    procedure Twiddle;
  end Has_Priority_Disc_1;

  HPD1 : Has_Priority_Disc_1 (System.Priority'Last);

  protected type Has_Priority_Disc_2 (Pr : Integer := -3) is
    pragma Interrupt_Priority (Pr);                                  -- OK.
    procedure Twiddle;
  end Has_Priority_Disc_2;

  HPD2 : Has_Priority_Disc_2 (System.Interrupt_Priority'Last);

  task type Has_Priority_Disc_3 (Pr : Integer) is
    pragma Priority (Pr);                                            -- OK.
  end Has_Priority_Disc_3;
  HPD3 : Has_Priority_Disc_3 (System.Any_Priority'First); 

  task type Has_Priority_Disc_4 (Pr : Integer) is
    pragma Interrupt_Priority (Pr);                                  -- OK.
  end Has_Priority_Disc_4;
  HPD4 : Has_Priority_Disc_4 (System.Any_Priority'Last); 
end BXD1002_2;


procedure BXD1002_3(Pri : Integer) is
  task T is
    pragma priority (Pri);                                           -- OK.
  end T;

  pragma Priority (Pri);                                           -- ERROR:
                                  -- priority for a procedure must be static

  task body T is 
  begin
    null;
  end T;
begin
  null;
end BXD1002_3;
