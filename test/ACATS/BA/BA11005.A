-- BA11005.A
--
--                             Grant of Unlimited Rights
--
--     Under contracts F33600-87-D-0337, F33600-84-D-0280, MDA903-79-C-0687,
--     F08630-91-C-0015, and DCA100-97-D-0025, the U.S. Government obtained 
--     unlimited rights in the software and documentation contained herein.
--     Unlimited rights are defined in DFAR 252.227-7013(a)(19).  By making 
--     this public release, the Government intends to confer upon all 
--     recipients unlimited rights  equal to those held by the Government.  
--     These rights include rights to use, duplicate, release or disclose the 
--     released technical data and computer software in whole or in part, in 
--     any manner and for any purpose whatsoever, and to have or permit others 
--     to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS.  THE GOVERNMENT MAKES NO EXPRESS OR IMPLIED 
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE 
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--*
--
-- OBJECTIVE:
--      Check that a parent body cannot declare a homograph of the child when
--      a child unit is included in the context clause of the parent body.
--
-- TEST DESCRIPTION:
--      Declare two public child subprograms and one public child package.
--      In the parent body, "with"s the children; declare homograph procedure 
--      and function with different parameter profile using the same simple
--      names of the children.
--
--
-- CHANGE HISTORY:
--      06 Dec 94   SAIC    ACVC 2.0
--      08 Nov 95   SAIC    Fixed bugs for ACVC 2.0.1
--
--!

package BA11005_0 is

   type Int is range 1 .. 100;

   -- ... Various definitions of types, objects, etc.

   procedure BA11005_6;  -- will require the package body

end BA11005_0;

     --=================================================================--

-- Public child procedure.

procedure BA11005_0.BA11005_1 (I : in     Int;
                               R :    out Int) is
begin

   R := I - 2;
   -- Real body of child procedure goes here.

end BA11005_0.BA11005_1;

     --=================================================================--

-- Public child function.

function BA11005_0.BA11005_2 (I : Int) return Int is
begin
   -- Real body of child function goes here.
   return (I / 2);
end BA11005_0.BA11005_2;

     --=================================================================--

-- Public child package.

package BA11005_0.BA11005_3 is

   type Child_Integer is range 101 .. 200;

   -- ... Various definitions of types, objects, etc.

end BA11005_0.BA11005_3;

-- No body for BA11005_0.BA11005_3.

-- Another Public child package.

package BA11005_0.BA11005_4 is

   type Baby_Integer is range 1 .. 2;

   -- ... Various definitions of types, objects, etc.

end BA11005_0.BA11005_4;

-- No body for BA11005_0.BA11005_4.

-- Another public child procedure.

procedure BA11005_0.BA11005_5 (I : in     Int;
                               R :    out Int) is
begin

   R := I - 2;
   -- Real body of child procedure goes here.

end BA11005_0.BA11005_5;

     --=================================================================--

with BA11005_0.BA11005_1;     -- Public child procedure.

with BA11005_0.BA11005_2;     -- Public child function.

with BA11005_0.BA11005_3;     -- Public child package.

package body BA11005_0 is

  BA11005_5 : Natural;                                      -- OK
                          -- library unit BA11005_5 not visible here

   -- When a parent body "with"s its own children, the simple names
   -- of the children (BA11005_1, BA11005_2, and BA11005_3) are
   -- directly visible.

   procedure BA11005_1 (I : in Int; R : out Int) is         -- ERROR:
   begin                                        -- Illegal homograph
      R := I - 2;
      -- Real body of procedure goes here.
   end BA11005_1;

   procedure BA11005_1 (X : out Int; Y : in Int) is         -- ERROR:
   begin                                        -- Illegal homograph
      X := Y * 5;
      -- Real body of procedure goes here.
   end BA11005_1;

   function BA11005_2 (I : Int) return Int is               -- ERROR:
   begin                                        -- Illegal homograph
      -- Real body of function goes here.
      return (I * 2);
   end BA11005_2;

   procedure BA11005_3 (I : in out Int) is                  -- ERROR:
   begin                                      -- Illegal overloading
      I := I + 5;
      -- Real body of procedure goes here.
   end BA11005_3;

   function BA11005_3 return Int is                         -- ERROR:
      I : Int := 44;                          -- Illegal overloading
   begin
      -- Real body of function goes here.
      return (I / 11);
   end BA11005_3;

   procedure BA11005_3 is                                   -- ERROR:
      I : Int := 24;                            -- Illegal homograph
   begin
      I := I / 4;
      -- Real body of procedure goes here.
   end BA11005_3;
   
  procedure BA11005_4 is                                   -- OK
      I : Int := 24;      -- library unit BA11005_4 not visible here
   begin
      I := I / 4;
      -- Real body of procedure goes here.
   end BA11005_4;

  procedure BA11005_6 is                                   -- OK
      I : Int := 24;      -- here to require the package body
   begin
      I := I / 4;
      -- Real body of procedure goes here.
   end BA11005_6;

end BA11005_0;
