-- BA16002.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--    The ACAA has created and maintains the Ada Conformity Assessment Test
--    Suite for the purpose of conformity assessments conducted in accordance
--    with the International Standard ISO/IEC 18009 - Ada: Conformity
--    assessment of a language processor. This test suite should not be used
--    to make claims of conformance unless used in accordance with
--    ISO/IEC 18009 and any applicable ACAA procedures.
--
--*
--
-- OBJECTIVE:
--    Check that a child unit cannot be named in a private with_clause by its
--    simple name or any abbreviated form of its full name. (10.1.6(2/2)).
--
--    Check that a unit nested in a library package cannot be named
--    in a nonlimited_with_clause. (10.1.6(2/2)).
--
-- TEST DESCRIPTION:
--    Declare an example of every kind of library unit, and try to use
--    them in a limited with. Use some children and some root units.
--
--    Note: The second objective was not tested in ACATS 2.x, so we
--    test both private with and regular withs.

-- CHANGE HISTORY:
--    28 Mar 2006   RLB    Created test from BA16001.
--
--!

package BA16002 is
    type Gollywog is null record;
end BA16002;

package BA16002.Pak2 is
    package Nested is
        type Glab is array (Natural range <>) of Gollywog;
    end Nested;
    procedure Inner_Proc;
    function Inner_Func return Boolean;
    package Math is
        PI : constant := 3.14159;
    end Math;
end BA16002.Pak2;

package body BA16002.Pak2 is
    procedure Inner_Proc is
    begin
        null;
    end Inner_Proc;
    function Inner_Func return Boolean is
    begin
        return False;
    end Inner_Func;
end BA16002.Pak2;

package BA16002.Pak3 is
    type Foobar is range 0 .. 10;
end BA16002.Pak3;

package BA16002.Pak3.Pak31 is
    type Flubber is access all Foobar;
end BA16002.Pak3.Pak31;

with BA16002.Pak2.Nested;        -- ERROR: Nested package
with BA16002.Pak2.Inner_Proc;    -- ERROR: Nested procedure
private with BA16002.Pak2.Math;  -- ERROR: Nested package
private with BA16002.Pak2.Inner_Func;-- ERROR: Nested function
private with Pak3;               -- ERROR: Not root package
private with Pak31;              -- ERROR: Not root package
private with Pak3.Pak31;         -- ERROR: Not root package
package BA16002.T1 is
   type Wowser is (Red, Blue, Green);
end BA16002.T1;
