-- BA150030.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--    The ACAA has created and maintains the Ada Conformity Assessment Test
--    Suite for the purpose of conformity assessments conducted in accordance
--    with the International Standard ISO/IEC 18009 - Ada: Conformity
--    assessment of a language processor. This test suite should not be used
--    to make claims of conformance unless used in accordance with
--    ISO/IEC 18017 and any applicable ACAA procedures.
--
--*
--
-- OBJECTIVE
--    Check that a library unit pragma cannot name a nested unit.
--
--    Check that a library unit pragma cannot be given in a nested unit.
--
--
-- TEST DESCRIPTION
--    The library unit pragmas as listed in the index of the RM are:
--
--    pragma All_Calls_Remote   E.2.3(6)
--    categorization pragmas   E.2(2)
--       pragma Remote_Call_Interface   E.2.3(2)
--       pragma Remote_Types   E.2.2(2)
--       pragma Shared_Passive   E.2.1(2)
--    pragma Elaborate_Body   10.2.1(24)
--    pragma Preelaborate   10.2.1(4)
--    pragma Pure   10.2.1(15)
--
--    We don't test Annex E pragmas here as this is a core test, so the only
--    pragmas of interest are Elaborate_Body, Preelaborate, and Pure.
--
--    Test BA15002 tries naming giving Preelaborate and Pure in a unit and
--    naming a following a nested unit, so we don't repeat those cases here.
--    Thus, we only test Elaborate_Body for that case.
--
--    Otherwise, for each pragma, we try giving it as the first item in a
--    nested package, with a full name, a simple name, and without a name.
--    We also try legal cases in child packages, as these are semantically
--    similar to nested packages.
--
-- TEST FILES:
--      This test consists of the following files:
--      -> BA150030.A
--         BA150031.A
--         BA150032.A
--         BA150033.A
--         BA150034.A
--         BA150035.A
--         BA150036.A
--         BA150037.A
--         BA150038.A
--         BA150039.A
--         BA15003A.A
--         BA15003B.AM
--
-- PASS/FAIL CRITERIA:
--      Each of files BA150031.A, BA150032.A, BA150033.A, BA150034.A,
--      BA150035.A, BA150036.A, BA150037.A, BA150038.A, BA150039.A, and
--      BA15003A.A contains errors. All errors in all these
--      files must be detected to pass the test; no errors should be
--      detected in file BA150030.A.
--
-- CHANGE HISTORY:
--      26 Dec 2014   RLB   Created test, patterned after BA15002.
--
--!

with Ada; use Ada;
package BA150030 is
    pragma Pure;                           -- OK.
    -- Empty.
end BA150030;

package BA150030.Child1 is
    pragma Pure(BA150030.Child1);          -- OK.
    type A is range 1 .. 10;
end BA150030.Child1;

package BA150030.Child2 is
    pragma Pure(Child2);                   -- OK.
    type B is range 1 .. 10;
end BA150030.Child2;

package BA150030.Child3 is
    pragma Pure;                           -- OK.
    type C is range 1 .. 10;
end BA150030.Child3;

package BA150030.Child4 is
    pragma Preelaborate(BA150030.Child4);  -- OK.
    type D is range 1 .. 10;
end BA150030.Child4;

package BA150030.Child5 is
    pragma Preelaborate(Child5);           -- OK.
    type E is range 1 .. 10;
end BA150030.Child5;

package BA150030.Child6 is
    pragma Preelaborate;                   -- OK.
    type F is range 1 .. 10;
end BA150030.Child6;

package BA150030.Child7 is
    pragma Elaborate_Body(BA150030.Child7);-- OK.
    type G is range 1 .. 10;
end BA150030.Child7;

package body BA150030.Child7 is
    -- Empty.
end BA150030.Child7;

package BA150030.Child8 is
    pragma Elaborate_Body(Child8);         -- OK.
    type H is range 1 .. 10;
end BA150030.Child8;

package body BA150030.Child8 is
    -- Empty.
end BA150030.Child8;

package BA150030.Child9 is
    pragma Elaborate_Body;                 -- OK.
    type I is range 1 .. 10;
end BA150030.Child9;

package body BA150030.Child9 is
    -- Empty.
end BA150030.Child9;

