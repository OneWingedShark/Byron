-- BC60003.A
--
--                             Grant of Unlimited Rights
--
--     The Ada Conformity Assessment Authority (ACAA) holds unlimited
--     rights in the software and documentation contained herein. Unlimited
--     rights are the same as those granted by the U.S. Government for older
--     parts of the Ada Conformity Assessment Test Suite, and are defined
--     in DFAR 252.227-7013(a)(19). By making this public release, the ACAA
--     intends to confer upon all recipients unlimited rights equal to those
--     held by the ACAA. These rights include rights to use, duplicate,
--     release or disclose the released technical data and computer software
--     in whole or in part, in any manner and for any purpose whatsoever, and
--     to have or permit others to do so.
--
--                                    DISCLAIMER
--
--     ALL MATERIALS OR INFORMATION HEREIN RELEASED, MADE AVAILABLE OR
--     DISCLOSED ARE AS IS. THE ACAA MAKES NO EXPRESS OR IMPLIED
--     WARRANTY AS TO ANY MATTER WHATSOEVER, INCLUDING THE CONDITIONS OF THE
--     SOFTWARE, DOCUMENTATION OR OTHER INFORMATION RELEASED, MADE AVAILABLE
--     OR DISCLOSED, OR THE OWNERSHIP, MERCHANTABILITY, OR FITNESS FOR A
--     PARTICULAR PURPOSE OF SAID MATERIAL.
--
--                                     Notice
--
--     The ACAA has created and maintains the Ada Conformity Assessment Test
--     Suite for the purpose of conformity assessments conducted in accordance
--     with the International Standard ISO/IEC 18009 - Ada: Conformity
--     assessment of a language processor. This test suite should not be used
--     to make claims of conformance unless used in accordance with
--     ISO/IEC 18009 and any applicable ACAA procedures.
--
--*
--
-- OBJECTIVE:
--     Check that the actual subprogram for a formal abstract subprogram
--     is a dispatching operation of the controlling type or the
--     actual type corresponding to the controlling type of the formal
--     subprogram.
--
-- TEST DESCRIPTION:
--     The commented out subtests (marked ERROR: ??) are not allowed by the
--     wording of the Standard, but could (and perhaps should) be allowed
--     as they are analogous to legal cases that happen in nested instances.
--     The question has been sent to the ARG for a decision. [Note: Those
--     test cases and the "use all type" make this an Ada2012-only test.]
--
-- CHANGE HISTORY:
--     18 May 2015   RLB   Created test.
--     26 May 2015   RLB   Commented out test cases in question until/if
--                         the ARG decides on a result.

package BC60003_A is

    type Root is tagged private;

    procedure P1 (P : in out Root);

    procedure P2 (P : access Root);

    procedure P3 (P : in out Root'Class);

    function F (P : in Root) return Boolean;

    function F2 (P : in Root'Class) return Boolean;

    function Construct return Root;

    function Build return Root'Class;

    package Nested is
        procedure Not_Prim_P (P : in out Root);

        function Not_Prim_F (P : in Root) return Boolean;

        function Not_Prim_Const return Root;
    end Nested;

private
    type Root is tagged null record;
end BC60003_A;

with BC60003_A;
package BC60003_B is

    procedure P4 (P : in out BC60003_A.Root);

    procedure P5 (P : access BC60003_A.Root);

    function F (P : in BC60003_A.Root) return Boolean;

    function Construct return BC60003_A.Root;

    generic
        type TPriv (<>) is tagged private;
        with procedure P (T : in out TPriv) is abstract;
    package Gen_1 is
    end Gen_1;

    generic
        type TPriv (<>) is tagged private;
        with procedure P (T : access TPriv) is abstract;
    package Gen_2 is
    end Gen_2;

    generic
        type TPriv (<>) is abstract tagged limited private;
        with function F (T : TPriv) return Boolean is abstract;
    package Gen_3 is
    end Gen_3;

    generic
        type TPriv (<>) is abstract tagged limited private;
        with function Construct return TPriv is abstract;
    package Gen_4 is
    end Gen_4;

    generic
        with procedure P (T : in out BC60003_A.Root) is abstract;
    package Gen_5 is
    end Gen_5;

    generic
        with function Construct return BC60003_A.Root is abstract;
    package Gen_6 is
    end Gen_6;

    generic
        type TDer (<>) is new BC60003_A.Root with private;
        with procedure P (T : in out TDer) is abstract;
    package Gen_7 is
    end Gen_7;

    generic
        type TDer (<>) is new BC60003_A.Root with private;
        with function Construct return TDer is abstract;
    package Gen_8 is
    end Gen_8;

end BC60003_B;

with BC60003_A, BC60003_B;
procedure BC60003 is

    use all type BC60003_A.Root; -- Make the primitives directly visible
                                 -- so that 12.6(9.1-2/3) can apply.

    package Inst01 is new BC60003_B.Gen_1
        (TPriv => BC60003_A.Root,
         P     => BC60003_A.P1);                                 -- OK.

    package Inst02 is new BC60003_B.Gen_1
        (TPriv => BC60003_A.Root,
         P     => BC60003_A.Nested.Not_Prim_P);                  -- ERROR:

    package Inst03 is new BC60003_B.Gen_1
        (TPriv => BC60003_A.Root,
         P     => BC60003_B.P4);                                 -- ERROR:

    --package Inst04 is new BC60003_B.Gen_1
    --    (TPriv => BC60003_A.Root'Class,
    --     P     => P1);                                         -- ERROR: ??

    package Inst05 is new BC60003_B.Gen_1
        (TPriv => BC60003_A.Root'Class,
         P     => BC60003_A.P3);                                 -- ERROR:


    package Inst06 is new BC60003_B.Gen_2
        (TPriv => BC60003_A.Root,
         P     => BC60003_A.P2);                                 -- OK.

    package Inst07 is new BC60003_B.Gen_2
        (TPriv => BC60003_A.Root,
         P     => BC60003_B.P5);                                 -- ERROR:


    package Inst08 is new BC60003_B.Gen_3
        (TPriv => BC60003_A.Root,
         F     => BC60003_A.F);                                  -- OK.

    package Inst09 is new BC60003_B.Gen_3
        (TPriv => BC60003_A.Root,
         F     => BC60003_A.Nested.Not_Prim_F);                  -- ERROR:

    package Inst10 is new BC60003_B.Gen_3
        (TPriv => BC60003_A.Root,
         F     => BC60003_B.F);                                  -- ERROR:

    --package Inst11 is new BC60003_B.Gen_3
    --    (TPriv => BC60003_A.Root'Class,
    --     F     => F);                                          -- ERROR: ??

    package Inst12 is new BC60003_B.Gen_3
        (TPriv => BC60003_A.Root'Class,
         F     => BC60003_A.F2);                                 -- ERROR:


    package Inst13 is new BC60003_B.Gen_4
        (TPriv     => BC60003_A.Root,
         Construct => BC60003_A.Construct);                      -- OK.

    package Inst14 is new BC60003_B.Gen_4
        (TPriv     => BC60003_A.Root,
         Construct => BC60003_A.Nested.Not_Prim_Const);          -- ERROR:

    package Inst15 is new BC60003_B.Gen_4
        (TPriv     => BC60003_A.Root,
         Construct => BC60003_B.Construct);                      -- ERROR:

    package Inst16 is new BC60003_B.Gen_4
        (TPriv     => BC60003_A.Root'Class,
         Construct => Construct);                                -- ERROR:
        -- Note: 12.6(9.1-2/3) does not apply to Construct, as it does
        -- not have a controlling parameter.

    package Inst17 is new BC60003_B.Gen_4
        (TPriv     => BC60003_A.Root'Class,
         Construct => BC60003_A.Build);                          -- ERROR:


    package Inst18 is new BC60003_B.Gen_5
        (P     => BC60003_A.P1);                                 -- OK.

    package Inst19 is new BC60003_B.Gen_5
        (P     => BC60003_A.Nested.Not_Prim_P);                  -- ERROR:

    package Inst20 is new BC60003_B.Gen_5
        (P     => BC60003_B.P4);                                 -- ERROR:


    package Inst21 is new BC60003_B.Gen_6
        (Construct => BC60003_A.Construct);                      -- OK.

    package Inst22 is new BC60003_B.Gen_6
        (Construct => BC60003_A.Nested.Not_Prim_Const);          -- ERROR:

    package Inst23 is new BC60003_B.Gen_6
        (Construct => BC60003_B.Construct);                      -- ERROR:


    package Inst24 is new BC60003_B.Gen_7
        (TDer => BC60003_A.Root,
         P    => BC60003_A.P1);                                  -- OK.

    package Inst25 is new BC60003_B.Gen_7
        (TDer => BC60003_A.Root,
         P    => BC60003_A.Nested.Not_Prim_P);                   -- ERROR:

    package Inst26 is new BC60003_B.Gen_7
        (TDer => BC60003_A.Root,
         P    => BC60003_B.P4);                                  -- ERROR:

    --package Inst27 is new BC60003_B.Gen_7
    --    (TDer => BC60003_A.Root'Class,
    --     P    => P1);                                          -- ERROR: ??

    package Inst28 is new BC60003_B.Gen_7
        (TDer => BC60003_A.Root'Class,
         P    => BC60003_A.P3);                                  -- ERROR:


    package Inst29 is new BC60003_B.Gen_8
        (TDer      => BC60003_A.Root,
         Construct => BC60003_A.Construct);                      -- OK.

    package Inst30 is new BC60003_B.Gen_8
        (TDer      => BC60003_A.Root,
         Construct => BC60003_A.Nested.Not_Prim_Const);          -- ERROR:

    package Inst31 is new BC60003_B.Gen_8
        (TDer      => BC60003_A.Root,
         Construct => BC60003_B.Construct);                      -- ERROR:

    package Inst32 is new BC60003_B.Gen_8
        (TDer      => BC60003_A.Root'Class,
         Construct => Construct);                                -- ERROR:

    package Inst33 is new BC60003_B.Gen_8
        (TDer      => BC60003_A.Root'Class,
         Construct => BC60003_A.Build);                          -- ERROR:


    generic
        type TDer is new BC60003_A.Root with private;
        with procedure P (T : in out TDer); -- Normal formal!
        with function FCon return TDer is abstract;
    package Gen_T1 is

        package Inst41 is new BC60003_B.Gen_1
            (TPriv => TDer, P     => P1);                        -- OK.

        package Inst42 is new BC60003_B.Gen_1
            (TPriv => TDer, P     => P);                         -- ERROR:

        package Inst43 is new BC60003_B.Gen_4
            (TPriv => TDer, Construct => Construct);             -- OK.

        package Inst44 is new BC60003_B.Gen_4
            (TPriv => TDer, Construct => FCon);                  -- OK.

        package Inst45 is new BC60003_B.Gen_7
            (TDer  => TDer, P     => P1);                        -- OK.

        package Inst46 is new BC60003_B.Gen_7
            (TDer  => TDer, P     => P);                         -- ERROR:

        package Inst47 is new BC60003_B.Gen_8
            (TDer  => TDer, Construct => Construct);             -- OK.

        package Inst48 is new BC60003_B.Gen_8
            (TDer  => TDer, Construct => FCon);                  -- OK.

    end Gen_T1;


    -- Try the example of AARM 12.6(8.j-8.l/2):

    generic
        type TDer (<>) is new BC60003_A.Root with private;
    package Gen_TA is

        procedure Dummy;

    end Gen_TA;

    package body Gen_TA is

        package Inst97 is new BC60003_B.Gen_4
            (TPriv => TDer, Construct => Construct);             -- OK.

        procedure Dummy is null;

    end Gen_TA;

    package Inst98 is new Gen_TA
        (TDer => BC60003_A.Root);                                -- OK.

    package Inst99 is new Gen_TA
        (TDer => BC60003_A.Root'Class);                          -- OK.

begin
    null;
end BC60003;
